##-#$%!@#$%^&*()webpage-path: backdrops.thtml
IARRC Simulator - Backdrops
Lets a user select a 3D backdrop to be placed around the track
IARRC Simulator - Backdrops IARRC Simulator A programmer's friend Backdrops Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Backdrops Backdrops or background scenery are a fun way to put the competition in a more realistic context. Backdrops can be selected by clicking your choice from be the options below. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: competitionvideos.thtml
IARRC Simulator - Robot Racing Competition Videos
Lists some useful IARRC-related online videos
IARRC Simulator - Robot Racing Competition Videos IARRC Simulator A programmer's friend Robot Racing Competition Videos Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Videos can be helpful in getting a better understanding of what to expect in the upcoming competition and a source of useful video test data. Here are some videos related to past competitions. Wild Weasil Takes the Lead at Waterloo 2009 Robot Race Team Invincible Wins Autonomous Racing Challenge 2008 University of Waterloo Autonomous Racing 2010 McMaster's robot racing team Autonomous Robot Speedway Competition 2009 A separate competition but still involving autonomous control with pylons. P1010008 - circuit race in St. Denis Centre Blizzard crash - drag race competition racing robots.mov - UBC testing out autonomous driving on robot Unmanned MAGIC Robot Demo - Multi Autonomous Ground-robotic International Challenge(MAGIC) University of Pennsylvania MAGIC2010 Proposal Video - Multi Autonomous Ground-robotic International Challenge(MAGIC) Using Videos as Test Data Downloading videos on most websites, is as easy as waiting for the download option to pop up but for youtube, you may need some tricks. Some tools are available from a google search. Some let you save directly to mpg or avi format which are supported by OpenCV libraries. Others save to flv format which will need to be converted using a format conversion program. In Google Chrome, the following steps should let you download the flv file. Right click on page Inspect element Click resources tab (enable resource tracking on that page if necessary) Sort resources by size Click on the largest resource Copy resource url and open the url in a new tab Download the full resource. In Google Chrome, method 2: Add &html5=True to the youtube url. Inspect the video element to search for the url that way. Video manipulation may be needed to get the video as you want. For Windows, a great free product for this is called VirtualDub. VirtualDub also let's you capture video using your video devices. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: config.thtml
IARRC Simulator - Configuration
Explains how to configure the simulator
IARRC Simulator - Configuration IARRC Simulator A programmer's friend Configuration Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Configuration The config folder contains two files: config.ini and sensors.ini. If you want to modify any of them, make sure the simulator is not running and make a backup of the current ini files. config/config.ini The format is fairly intuitive and similar to typical ini files. Comments in config.ini will explain what the properties are and how they are used. You may want to edit config.ini to: Change size, shape... of various track objects inclucing ramp, pylons, tunnel Tell the simulator about new competition rules Set unique properties of your robot such as suspension-softness config/sensors.ini This file describes all sensors currently used by the simulator. It is a full description of sensor positions, orientation, and other properties. sensors.ini is read from every time the simulator loads and written to every time the simulator shuts down properly. Do not change the video sensor names. The format is similar to typical ini files with a small exception. Lines like "sensor lidar1 lidar" are defining new objects and subsequent lines can set properties for the new objects. It is a bit like declaring a variable and being able to use it below its declaration. The only reason we can think of you editing sensors.ini is if you want to have another program automatically generate or import the sensor layout. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: copyright.thtml
IARRC Simulator - Copyright Policy
Explains the copyright policy for this website and the simulator
IARRC Simulator - Copyright Policy IARRC Simulator A programmer's friend Copyright Policy Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Most files in the downloadable archive are copyright &#169; 2010 - 2011 Josh Greig. All rights are reserved with only a few exceptions. Copying from C/C++ Examples You are welcome to copy from the c++ code examples. You are welcome to derive code for the IARRC competition from the IARRC Demo project. Using Data From Simulator You are welcome to use graphics and data retrieved from the simulation program in design reports, presentations, and to test your robot control software. 3D models and editing work of textures are not to be copied into other software products. Third Party Content The ground texture is derived from Google Maps. Some of the robot textures are derived from website images of a Traxxas E-max. History of the IARRC Simulator Although the idea of a simulator to help with control software development came from Josh in January 2010, this simulator wouldn't have been made without the work of Matthew Hurajt and Siddhant Ahuja. The idea of making a simulator to test control code was demonstrated in a small Java applet in late January 2010. The applet and the idea of simulating the conversation between control system, video camera, and motor controls appealed to Sid. In weeks following, Matthew Hurajt took a similar simulator idea on as a university Capstone project under the official supervision of Dr. Jonathan Wu. Matt's simulator is helping with the Intelligent Ground Vehicle Competition(IGVC). Some technical ideas for the IARRC Simulator were taken from discussions with Sid and Matt. The use of OpenGL was originally Sid's idea. The use of a graphical track editor was Matt's idea and implemented in his project. Lots of other ideas were derived from experience working with engineering students in the 2010 IARRC competition. These students include: Daniel Kubacki Mohammad Al Anee Amir Mehrabi Mukunthan Jeyakumar Fayaz Kadir Alex Bussiere Jeremy Fields Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: devices.thtml
IARRC Simulator - Live Sensor Data
Displays live sensor data being retrieved from the simulator
IARRC Simulator - Live Sensor Data IARRC Simulator A programmer's friend Live Sensor Data Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Please enable JavaScript in your web browser to properly use this page. /** Gets the port the human-readable documents are served on */ function getDocumentServerPort() { return 2601; } Drive/Speed Motor Control Reverse &nbsp; Forward Steering Motor Control Left &nbsp; Right Sensors Live Sensor Data Auto refresh live sensor data Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: drone.thtml
IARRC Simulator - Drone Helicopter
Introduces a flying helicopter drone and how it is used in the simulator
IARRC Simulator - Drone Helicopter IARRC Simulator A programmer's friend Drone Helicopter Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Drones Drones equiped with a camera can offer an extra way of mapping out terrain and obstacles. Autonomous drones were temperarily permitted at the 2011 IARRC competition but later . In the simulator, a miniature helicopter is provided attached to the top of your car. To keep things simple, it lets you tell it where to go or to just follow your car at a specific elevation. Complications with air turbulance are assumed handled within the helicopter itself. Left in your control is a few basic commands to control the helicopter and a single video sensor aimed straight down from the helicopter. The API reference tells you how to communicate with the helicopter using your software. You may be curious how a drone may be implemented to simply follow up on GPS targets and stabilize itself. Positions can be stabilized within a helicopter by comparing GPS data to desired positions and sending corrective actions back to helicopter motors as shown in the video. // '); } // ]]> Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: forums.thtml
IARRC Simulator - Forums
Offers a way to send questions, comments, and other feedback to the IARRC Simulator developers
IARRC Simulator - Forums IARRC Simulator A programmer's friend Forums Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search To report bugs, ask questions, or get other types of support, please go to our online forum at http://iarrc-sim.comoj.com/forums/ Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: IARRC_Demo_project_cpp.thtml
IARRC Simulator - IARRC Demo Project
Introduces various code example projects and how to use them
IARRC Simulator - IARRC Demo Project IARRC Simulator A programmer's friend IARRC Demo Project Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Installing OpenCV Solving stdafx.h problems OpenCV The demo project depends on OpenCV so it will need to be installed, if it isn't already on the computer. There are plenty of tutorials online to explain how to install it on your type of computer for your type of development software. Try searching here Solving stdafx.h problems The include file stdafx.h may cause some trouble for you while compiling/building the project. If it causes trouble for you, please follow the appropriate instructions below based on the c++ development tool you are using. stdafx.h for Visual c++ 2008 Express Edition Click Project -&gt; IARRC_Demo properties... In the Property Pages window, click to expand "Configuration Properties" Expand "C/C++" Click General The value for "Additional Include Directories" should include some opencv directories. Add the IARRC_demo project root directory to that list. For example, ;C:\Users\Josh\Documents\Visual Studio 2008\Projects\IARRC_Demo\IARRC_Demo More information on the stdafx.h problem Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: IARRC_Demo_project_java.thtml
IARRC Simulator - IARRC Demo Project
Introduces various code example projects and how to use them
IARRC Simulator - IARRC Demo Project IARRC Simulator A programmer's friend IARRC Demo Project Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Installing OpenCV Solving stdafx.h problems OpenCV The demo project depends on OpenCV so it will need to be installed, if it isn't already on the computer. There are plenty of tutorials online to explain how to install it on your type of computer for your type of development software. Try searching here Solving stdafx.h problems The include file stdafx.h may cause some trouble for you while compiling/building the project. If it causes trouble for you, please follow the appropriate instructions below based on the c++ development tool you are using. stdafx.h for Visual c++ 2008 Express Edition Click Project -&gt; IARRC_Demo properties... In the Property Pages window, click to expand "Configuration Properties" Expand "C/C++" Click General The value for "Additional Include Directories" should include some opencv directories. Add the IARRC_demo project root directory to that list. For example, ;C:\Users\Josh\Documents\Visual Studio 2008\Projects\IARRC_Demo\IARRC_Demo More information on the stdafx.h problem Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces.thtml
IARRC Simulator - Software Interfaces
Gives an overview of the programming API and communication protocol for interacting with the simulator
IARRC Simulator - Software Interfaces IARRC Simulator A programmer's friend Software Interfaces Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Overview of Protocols The purpose of the simulator is to help people program better control software for robotic cars. This control software can be written in any language and may work over any execution platform so instead of compiling the code together, the control software and the simulator are linked using HTTP. The simulator can be used by control software written in any programming language that supports TCP/IP and/or HTTP. This includes c++, Java, Python and many more languages. The simulator can also be controlled from other computers or networked devices. Communication with the simulator may be much slower than with real robot hardware but this problem can be overcome by controling time in the simulator. The interfacing section of this website serves as a complete programming-language-independent reference for communication with the simulator. If you want to quickly get connected with the simulator in c++, Java, or Python, play with our existing projects. Even web pages can interact with the simulator to read sensor data and send commands to the simulated car motors. The devices and sensors section is a good example. It relies on things like JavaScript's XMLHttpRequest to handle the required HTTP messages. 2601 would be the port for the TCP/IP connection. localhost is also used in setting up a TCP/IP connection. It may avoid headaches to use 127.0.0.1 instead of localhost as a host name. If you want to connect to the simulator from a different computer or device, you'll need to use the IP address of the computer that runs the simulator. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_alldevices.thtml
IARRC Simulator - Interacting with All Devices
Explains how to retrieve information on all sensors in the robotic car
IARRC Simulator - Interacting with All Devices IARRC Simulator A programmer's friend Interacting with All Devices Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data All Devices http://localhost:2601/get?item=sensors - for retrieving information on all sensors. The sensors can be listed in different formats specified by setting format parameter to xml, JSON, txt, or ini. Any sensor property can be retrieved by sending an HTTP request to get item=property&amp;name=[the ini formatted name]. For example, you can get the width property of a device called video1 by making a request to http://localhost:2601/get?item=property&amp;name=device-video1-width. Note that the previous link will only work if a sensor named video1 exists. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_demo_projects.thtml
IARRC Simulator - Demo Projects and API's
Introduces various code example projects and how to use them
IARRC Simulator - Demo Projects and API's IARRC Simulator A programmer's friend Demo Projects and API's Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Java IARRC Client Examples To help connect your software to the simulator, some examples were written in Java. The examples are found in the java folder from the downloadable zip at the website A jar file, IARRC_Sim_API.jar, archives the classes needed to retrieve sensor data and send back motor control commands. Running the example To run the example, you need Java installed on your computer and the PATH environment variable set to include the path to your java installation's bin folder. The config/config.ini file will also need its sim-install property set to the directory where you've extracted the simulator. If you are in Windows, the .bat files should run the programs. If you are in Ubuntu, use the .sh files to run the programs. Potential Problems and Solutions If your terminal says java or javac is not a recognized command, you must still set the PATH environment variable to include Java's bin folder. If Java is not installed, install it. If your terminal shows a stack trace starting with "java.io.FileNotFoundException:", you must still update the sim-install property in config/config.ini to the directory where the simulator was extracted. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_drone_controls.thtml
IARRC Simulator - Interacting with Drones
Explains how to control the autonomous flying drones
IARRC Simulator - Interacting with Drones IARRC Simulator A programmer's friend Interacting with Drones Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Drone Controls Each car is equipped with a drone that you can control with fairly simple commands such as hovering, and landing. Parameter Description action hover - for hovering the drone at a specified number of centimeters above the ground landASAP - lands the drone on the ground as soon as possible landOnCar - lands the drone on its associated car follow - follows its associated car elevation When action is "hover", elevation is the number of centimeters above the ground. car_id This is an optional parameter which defaults to the index of the main car(the one your sensors are on and you control). This is the id of the robotic car associated with the drone. The available ids can be retrieved from here and in XML here. If index is not specified, the main car is used. Examples: http://localhost:2601/drone?action=hover&elevation=2000 - Hovers the drone at 2000cm above the ground. http://localhost:2601/drone?action=landOnCar - Lands the drone on its associated car. http://localhost:2601/drone?action=follow - Follows its associated car at a default elevation of 2000cm. http://localhost:2601/drone?action=follow&elevation=1000 - Follows its associated car at an elevation of 1000cm. http://localhost:2601/drone?action=landASAP - Lands the drone on the ground as soon as possible. http://localhost:2601/drone?car_id=car1&action=hover&elevation=2000 - Hovers the drone of car1 at 2000cm above the ground. http://localhost:2601/drone?car_id=car1&action=landOnCar - Lands the drone of car1 on its associated car. http://localhost:2601/drone?car_id=car1&action=landASAP - Lands the drone of car1 on the ground as soon as possible. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_gps.thtml
IARRC Simulator - GPS
Explains how to retrieve GPS data from the car
IARRC Simulator - GPS IARRC Simulator A programmer's friend GPS Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data The car's single GPS device is assumed to be at the centre of it. It can be used to help with navigation but don't rely on it too much because when the competition is held indoors, the GPS device may not function properly. Here are some addresses for retrieving the car's GPS data. http://localhost:2601/get?item=gps&amp;format=xml - XML format http://localhost:2601/get?item=gps&amp;format=JSON - JSON format http://localhost:2601/get?item=gps&amp;format=txt - a line-separated text format Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_http.thtml
IARRC Simulator - Interacting Using HTTP
Explains how to use HTTP in various programming languages
IARRC Simulator - Interacting Using HTTP IARRC Simulator A programmer's friend Interacting Using HTTP Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Using TCP/IP Every device can be controlled and queried from using HTTP GET requests. If your programming language doesn't have libraries or API for HTTP requests like Java's java.net.URL class, Python's urllib package,... the required requests can be issued using TCP/IP. TCP/IP is supported in Windows by WinSock, in Ubuntu by standard libraries like sys/socket.h. The URL can be converted into an HTTP request by breaking out parts of the URL and placing them in a template as in this example. URL: http://localhost:2601/requestpath An HTTP Request can be sent over any TCP/IP socket: GET /requestpath HTTP/1.1 The request path would be everything including any GET parameters you use. The request path must start with a slash /. For example, a request path could be: "/set?item=property&value=5" It is critically important to leave a blank line after. In HTTP, this blank line means the end to the request headers. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_lidar.thtml
IARRC Simulator - Interacting with Lidar Devices
Explains how to interact with LIDAR sensors
IARRC Simulator - Interacting with Lidar Devices IARRC Simulator A programmer's friend Interacting with Lidar Devices Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data LIDAR Sensors LIDAR Data can be queried using addresses like: http://localhost:2601/get?item=sensordata&name=lidar1. This link will work only if there exists a Lidar sensor named lidar1. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_motorcontrols.thtml
IARRC Simulator - Interacting with Car Motors
Explains how to interact with simulated motors of the car
IARRC Simulator - Interacting with Car Motors IARRC Simulator A programmer's friend Interacting with Car Motors Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Motor controls HTTP-based Motor Control An alternative to the above TCP/IP based format is using HTTP. Using any HTTP request with method GET, you can specify the steering and drive values by requesting the following addresses on the document server port. For example, http://localhost:2601/set?item=steering&amp;value=5 - sets steering to 5 http://localhost:2601/set?item=drive&amp;value=0 - sets drive force to 0 Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_retrieving.thtml
IARRC Simulator - Retrieving Other Data
Explains how to retrieve various other pieces of information from the simulator
IARRC Simulator - Retrieving Other Data IARRC Simulator A programmer's friend Retrieving Other Data Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Retrieving Other Data A list of robotic cars in the environment can be retrieved using HTTP. The result can be in a plain text, XML, or JSON format. http://localhost:2601/get?item=cars&format=xml - gets information in XML format http://localhost:2601/get?item=cars&format=txt - gets information in a line separated plain text format http://localhost:2601/get?item=cars&format=JSON - gets information in JSON format Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_time_control.thtml
IARRC Simulator - Time Control
Explains how to take control of time in the simulated environment
IARRC Simulator - Time Control IARRC Simulator A programmer's friend Time Control Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data A robot control solution may depend on a very specific feedback cycle rate so the simulator offers ways for you to control the time elapsed between each feedback loop. Let's look at an example. Gathering data from sensors, processing, and outputting commands may happen 30 times a second. To test the code with the simulator, the simulator can be: paused to stop it from progressing in realtime sent a message to progress 1/30 of a second when the code is ready for the next frame of inputs The address formats to tell the simulator to pause, use realtime, or progress through time a specified amount can be understood by looking at the examples below. http://localhost:2601/set?item=iniproperty&name=application-paused&value=1 - pause simulation http://localhost:2601/set?item=iniproperty&name=application-paused&value=0 - unpause simulation(run in realtime) http://localhost:2601/set?item=time&value=30 - Progress 30ms(30/1000 second or roughly 1/30 of a second) through time. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_trackmanipulation.thtml
IARRC Simulator - Manipulating the Track
Explains how to load, clear, and manipulate the track from an external program
IARRC Simulator - Manipulating the Track IARRC Simulator A programmer's friend Manipulating the Track Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Track Manipulation Tracks can be manipulated in the track editor manually but also manipulated using your own software. Through HTTP requests, you can clear the current track, add new obstacles, cars. Clearing All Obstacles Clearing the current track can be done using a GET request to http://localhost:2601/remove?item=track Adding a Single Obstacle Adding a pylon to a track can be done by sending a GET request to an address like http://localhost:2601/add?item=trackobject&amp;type=pylon&amp;position-x=100&amp;position-z=-200. type must be one of pylon,stop,light, ramp, or maincar. The properties will be set to defaults unless you specify them. The maincar is a special case in which no new object is added to the track. Instead, it helps you reset properties on the car to bring it back to a good starting state for the new track. Adding Multiple Obstacles In One Command You can send multiple obstacle creation commands to the simulator in one message. This can be done by sending an add request where item=track and value describes the objects you want to add. The value should be a semicolon-separated list of obstacle descriptions. Each obstacle description starts with the type: pylon, stop, light, ramp and is followed by comma separated property assignments. For example, the following value will add two pylons to the track: pylon,position-x=10,position-z=50;pylon,position-x=200,position-z=300 It is generally recommended that a POST method is used instead of GET since the value can easily exceed the 255 length limit for URL's. When using POST, also stick to URL-encoding for the parameters that get specified in the body of the POST request. Commas, semicolons, hyphens, letters, numeric digits... can all stay as they are. The following link will add a single pylon to the simulator's track. http://localhost:2601/add?item=track&amp;value=pylon Loading Track Files If you want to load a track from a file using your own program, send your load request to http://localhost:2601/load?item=track&amp;value=filename. The filename has to be one found in the tracks directory. To get a listing of valid filenames, send a request to http://localhost:2601/get?item=tracks&amp;format=txt. The format can be xml, JSON, or txt. Retrieving Track Information Information on all obstacles in the simulator can be retrieved in xml, and plain text formats. This can be useful since sensor data can be processed to estimate obstacle locations but the actual data would be important to automatically test estimations against the desired results. http://localhost:2601/get?item=track&amp;format=xml - xml format http://localhost:2601/get?item=track&amp;format=txt - txt format Examples of Track Generators The track manipulation features described above were applied by the Maze Track Generator. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_ultrasonic_devices.thtml
IARRC Simulator - Interacting with Ultrasonic Devices
Explains how to retrieve ultrasonic sensor data from the simulator
IARRC Simulator - Interacting with Ultrasonic Devices IARRC Simulator A programmer's friend Interacting with Ultrasonic Devices Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Ultrasonic Sensors The current depth reading for any ultrasonic sensor can be queried using the depth property. For example, if you have an ultrasonic sensor named ultra1, you can see its current depth measurement by sending a request to http://localhost:2601/get?item=property&amp;name=device-ultra1-depth. Note that if ultra1 does not currently exist, that will not display a depth value. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: interfaces_video_devices.thtml
IARRC Simulator - Interacting with Video Devices
Explains how to retrieve video frames from video devices in the simulator
IARRC Simulator - Interacting with Video Devices IARRC Simulator A programmer's friend Interacting with Video Devices Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search API Topics Overview of Protocols IARRC Client Demo Using TCP/IP All devices Motors Drone Controls LIDAR sensors Ultrasonic Sensors Video devices Track Manipulation Time Control GPS Retrieving Other Data Video Capturing Video capturing is most easily done using HTTP requests. You can test it out by running the simulator and going to http://localhost:2601/get?item=frame&name=video1. The frames are transferred in uncompressed 24-bit Windows Bitmap Format which is quote simple but examples also come with the needed bitmap reader code in c++ so you can copy what you need from them. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: lidardisplay.thtml
IARRC Simulator - LIDAR Data Display
Displays LIDAR data for a particular LIDAR sensor from the main car in the simulator
IARRC Simulator - LIDAR Data Display IARRC Simulator A programmer's friend LIDAR Data Display Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search /** Gets the port the human-readable documents are served on */ function getDocumentServerPort() { return 2601; } // cached values so the display can work efficiently. var _angleRangeMax=false; var _maxDepth=false; /** Returns the number of degrees across a scan of a LIDAR sensor */ function getAngleRangeInDegrees() { if (!_angleRangeMax) _angleRangeMax=getSimulatorProperty("device-"+getSensorName()+"-range-scan"); return _angleRangeMax; } function getMaximumDepth() { if (!_maxDepth) _maxDepth=getSimulatorProperty("device-"+getSensorName()+"-range-max"); return _maxDepth; } /** Returns the sensor name we are currently working with. */ function getSensorName() { return ""; } This page is for display of LIDAR data for . auto-refresh LIDAR Data Zoom: Lidar Sensor Orientation Important features on this page will not work because JavaScript is disabled or unsupported by your web browser. Please enable JavaScript. Horizontal Degrees Vertical Degrees Twist Degrees Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: maze_generator.thtml
IARRC Simulator - Maze Track Generator
Generates a maze randomly that can be transmitted to the simulator
IARRC Simulator - Maze Track Generator IARRC Simulator A programmer's friend Maze Track Generator Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Maze Track Generator Make random mazes using the following form and replace the simulator's track by clicking . Each maze starts in the top left corner and ends at the light blue square. Making the maze larger than 15 by 15 will cause noticable choppiness in the simulator. Width Height Show Solution Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: sensorEditorUI.thtml
IARRC Simulator - Sensor Layout Editor
Explains the sensor layout editor of the simulator window
IARRC Simulator - Sensor Layout Editor IARRC Simulator A programmer's friend Sensor Layout Editor Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Simulator 1 Track Editor 2 Sensor Editor 3 Role of the Sensor Editor The sensor layout editor is an area to edit the sensor layout of your virtual car. It lets you add, delete, and reposition sensors. For Ultrasonic sensors, it also lets you specify rotation. Accessing the Sensor Editor To access the sensor editor, hit '3' on the keyboard while the main simulator window is active or click here. Editing Ultrasonic Orientation Ultrasonic sensors can be aimed by dragging the tips of the directional lines. Editing Lidar Sensor Orientation Go to Devices and Sensors and wait for the video display to show. Click the Detailed LIDAR display link for the Lidar sensor you want to aim. Edit the rotation angles and the Lidar sensor's orientation should immediately change. Editing Video Orientation Video devices can't be aimed in the sensor editor but they can be in simulation mode by dragging the mouse on the display. The video device can also be aimed using rotation controls in this website. Here are some steps to follow: Go to Devices and Sensors and wait for the video display to show. Click the video display image. Edit the rotation angles and the camera orientation should immediately change. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: simulationui.thtml
IARRC Simulator - Simulation Mode User Interface
Explains the simulation mode of the simulator window
IARRC Simulator - Simulation Mode User Interface IARRC Simulator A programmer's friend Simulation Mode User Interface Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Simulator 1 Track Editor 2 Sensor Editor 3 Steering and Drive Controls Most often you will be making your own tools to control the car through through HTTP interfaces but you can also use the keyboard. Up Arrow/W/w Increase forward force Down Arrow/S/s Decrease forward force Right Arrow/D/d Steer more right, if going forward. If going in reverse, it is as you'd expect when parking a real car. Left Arrow/A/a Steer more left, if going forward. If going in reverse, it is as you'd expect when parking a real car. Enter Aims the camera straight, steers straight, zooms to default amount, and stops the car immediately. If the car is really far from origin or off the map, hitting enter puts car back to origin. This feature is particularly useful if your car gets out of control in some way. Camera Orientation You can rotate the camera by dragging the mouse on the window. Camera Zoom/Magnification Use the mouse wheel to zoom in or out. Accessing the Simulation User Interface When the simulator runs, this is the first area you go to. In other areas, you click the close button or '1' on the keyboard to get to it. If you want your external program to make sure it is the current mode, send a request to: http://localhost:2601/set?item=uimode&amp;value=1. Set the bringtofront parameter to 1 if you also want the window brought to the foreground in the window stack. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: simulationwindow.thtml
IARRC Simulator - Simulation Window
Explains the simulator window
IARRC Simulator - Simulation Window IARRC Simulator A programmer's friend Simulation Window Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Simulation Window The user interface for the simulator is broken into 3 modes of the simulation window and this web browser interface. The modes of the simulation window are briefly described below: Simulation mode is for running your simulation and seeing it from the perspective of your car's video camera. Track editing mode is for editing a track. This lets you add, remove, modify all the main obstacles of the competition including pylons, stop signs, traffic lights, ramps, and even autonomously controlled competing cars. sensor editing mode is for editing your car's sensor layout. You must use 1 video device but are free to any number of ultrasonic, and lidar sensors. Simulator 1 Track Editor 2 Sensor Editor 3 Steering and Drive Controls Most often you will be making your own tools to control the car through through HTTP interfaces but you can also use the keyboard. Up Arrow/W/w Increase forward force Down Arrow/S/s Decrease forward force Right Arrow/D/d Steer more right, if going forward. If going in reverse, it is as you'd expect when parking a real car. Left Arrow/A/a Steer more left, if going forward. If going in reverse, it is as you'd expect when parking a real car. Enter Aims the camera straight, steers straight, zooms to default amount, and stops the car immediately. If the car is really far from origin or off the map, hitting enter puts car back to origin. This feature is particularly useful if your car gets out of control in some way. Camera Orientation You can rotate the camera by dragging the mouse on the window. Camera Zoom/Magnification Use the mouse wheel to zoom in or out. Accessing the Simulation User Interface When the simulator runs, this is the first area you go to. In other areas, you click the close button or '1' on the keyboard to get to it. If you want your external program to make sure it is the current mode, send a request to: http://localhost:2601/set?item=uimode&amp;value=1. Set the bringtofront parameter to 1 if you also want the window brought to the foreground in the window stack. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
##-#$%!@#$%^&*()webpage-path: tracks.thtml
IARRC Simulator - Tracks and Track Editor
Explains the track editor in the simulator window
IARRC Simulator - Tracks and Track Editor IARRC Simulator A programmer's friend Tracks and Track Editor Simulation Window API &#38; Protocols Live Sensor Data Extras Support and Feedback Drones Backdrops Configuration Videos Search Simulator 1 Track Editor 2 Sensor Editor 3 Contents Loading a track Editing Accessing Track Editor Side Menu Rotating Objects Extra Editing Tips Saving Maze Track Generator Loading a Track Select a track from the drop down on the right and then click Load Track. To load this using your own client, see the API section on track manipulation. Editing a Track Accessing the Track Editor You can access the Track Editor by clicking here or by following these steps: Click the main video device window. Hit the letter 'e' or '2' on the keyboard. It should switch to a display similar to the image below. Track Editor Menu The side menu options are described below and can be selected by mouse click or hitting the underlined letter. Lets you add pylons to the track wherever you click with the left mouse button. Lets you add traffic lights to the track wherever you click with the left mouse button. Lets you add stop signs to the track wherever you click with the left mouse button. Lets you add ramps to the track wherever you click with the left mouse button. Lets you add tunnels to the track wherever you click with the left mouse button. Lets you add robotic cars to the track wherever you click with the left mouse button. These cars are programmed to avoid objstacles but ignore stop sign and traffic lights. They are intended for testing your software against collisions with other moving cars. Lets you drag objects using the mouse. To move an object, click and hold down the left mouse button on the object and then drag it. If objects are big, drag from their centres. You will not be able to drag the display around. Lets you delete objects by clicking them with the left mouse button on the objects. If objects are big, click in the centres. Closes the track editor. This can also be done by hitting 'c', '1'(for simulation), or '2'(for sensor editor). Rotating Objects Most objects including stop lights, stop signs, ramps, tunnels, and robotic cars can be rotated. Rotating is done by selecting the option and dragging the tips of the blue lines. The image below shows the blue lines. Extra Editing Tips The mouse wheel can be used for zooming in and out. Unless the option is selected, you can drag the mouse to translate the display to other areas. Saving a Track To save the current track, follow these steps. Click the main video window. Hit the escape(Esc) key on the keyboard. This will save the track to track.txt in the same directory as the simulator's executable file. If you want to make this file available in the list of loadable tracks, simply copy it into the tracks directory. Simulation Window API &#38; Protocols Live Sensor Data Support and Feedback &#169; 2011 - Policy
