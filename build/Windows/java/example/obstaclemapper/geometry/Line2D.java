package geometry;public class Line2D{  // position of a point on this line  private double x,y;    // direction of this line.  private double dx,dy;  /**  Either dx or dy must be something other than 0 or direction of the line will be undefined.  */  public Line2D(double x,double y,double dx,double dy)  {  	assert dx!=0 || dy!=0;	assert !(new Double(dx).isNaN());	assert !(new Double(dy).isNaN());	assert !(new Double(x).isNaN());	assert !(new Double(y).isNaN());	    this.x=x;	this.y=y;		this.dx=dx;	this.dy=dy;  }    /**  Returns a point at the specified distance from this point's position vector in the direction of this line's direction vector.    @param distance is the distance from this point's position vector to the resulting point.    A negative sign is interpretted as returning a point going in the opposite direction of this line's direction vector.  */  public Vector2D getVector2DAtDistance(double distance)  {     assert !(new Double(distance).isNaN());	      double m = new Vector2D(this.dx,this.dy).getMagnitude();	 	 	assert !(new Double(m).isNaN());		 return new Vector2D(this.x+this.dx*distance/m,this.y+this.dy*distance/m);  }    public Vector2D getPositionVector()  {    return new Vector2D(x,y);  }    public Vector2D getDirectionVector()  {    return new Vector2D(dx,dy);  }    /**  Finds the point where the specified lines intersect, if there is a point of intersection.    Parallel lines have no intersection and get a result of null.  */  public static Vector2D getIntersectionPoint(Line2D l1,Line2D l2)  {    if (l1.dx!=0 && l2.dx!=0)	{	  double m1 = l1.dy/l1.dx;	  if (m1==0)	     return null;		 	  double m2 = l2.dy/l2.dx;	  double b1=l1.getB();	  double b_difference = l2.getB()-b1;	  double denominator = m1*(1-m2/m1);	  if (denominator==0)	     return null;		 	  double x = b_difference/denominator;	  double y = m1*x+b1;	  	  return new Vector2D(x,y);	}		return null;  }    /**   Gets y-coordinate where this line would intersect the y-axis.      If this line was expressed as y=mx+b, this method would return b.  */  public double getB()  {    if (this.dx==0)	    return 0;		   double s= -this.x/this.dx;       return this.y+this.dy*s;  }    /**  Returns a line running perpendicular to this one and holding the specified point  */  public Line2D getPerpendicularFrom(double x,double y)  {    return new Line2D(x,y,-this.dy,this.dx);  }    /**  Returns a line running perpendicular to this one and holding the specified point  */  public Line2D getPerpendicularFrom(Vector2D p)  {     return getPerpendicularFrom(p.getX(),p.getY());  }    /**  Calculates the perpendicular bisector for a line connecting the 2 points.  */   public static Line2D getPerpendicularBisector(Vector2D p1, Vector2D p2)   {      // calculate position of the point midway between p1 and p2.  	  // This will also be on the perpendicular bisector.      double x=(p1.getX()+p2.getX())/2;	  double y=(p1.getY()+p2.getY())/2;	  	  double dx = -(p1.getY()-p2.getY());	  double dy = p1.getX()-p2.getX();	  	  return new Line2D(x,y,dx,dy);   }}